{"version":3,"sources":["components/Search.js","components/GroupsEntry.js","components/Groups.js","components/TodoListEntry.js","components/TodoList.js","data.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","react_default","a","createElement","type","className","placeholder","id","onChange","e","onSearch","target","value","onBlur","GroupsEntry","_this","this","style","cursor","margin","color","fontSize","onClick","console","log","innerHTML","onGroupChange","groupname","React","Component","Groups","height","grouplist","map","cur","i","components_GroupsEntry","key","fontWeight","TodoListEntry","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","currentObj","contentObj","content","localStorage","setItem","JSON","stringify","entireDATA","_this2","keys","length","group","DATA","setState","onFocus","push","width","maxWidth","onKeyDown","keyCode","blur","preventDefault","removeEntry","updateDATA","TodoList","currentGroup","document","getElementById","focus","obj","components_TodoListEntry","concat","nextID","isDone","remindAt","createdAt","Date","appRender","src_data","App","data","datajs","floydReminderApp","parse","getItem","largestID","update","query","bind","assertThisInitialized","debounce","g","func","wait","timerID","_len","arguments","args","Array","_key","clearTimeout","setTimeout","apply","q","splice","groupArr","reduce","acc","includes","sort","listArr","filter","b","searchArr","indexOf","components_Search","components_Groups","components_TodoList","modifyMemo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAceA,SAZA,SAACC,GAAD,OACXC,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOC,UAAU,eAAeC,YAAY,eAAKC,GAAG,eAChEC,SAAU,SAAAC,GACNT,EAAMU,SAASD,EAAEE,OAAOC,QAE5BC,OAAQ,SAAAJ,GACJA,EAAEE,OAAOC,MAAQ,KACjBZ,EAAMU,SAAS,WCcRI,mLAhBF,IAAAC,EAAAC,KAEL,OACIf,EAAAC,EAAAC,cAAA,OAAKc,MAAO,CAACC,OAAQ,UAAWC,OAAQ,EAAGC,MAAO,OAAQC,SAAU,IACpEhB,UAAU,kCACViB,QAAS,SAACb,GACNc,QAAQC,IAAI,kBAAmBf,EAAEE,OAAOc,WACxCV,EAAKf,MAAM0B,cAAcjB,EAAEE,OAAOc,aAGrCT,KAAKhB,MAAM2B,kBAfEC,IAAMC,WC6BjBC,mLAvBF,IAAAf,EAAAC,KACL,OACAf,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iDAAiDY,MAAO,CAACc,OAAO,MACvE9B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACVW,KAAKhB,MAAMgC,UAAUC,IAAI,SAACC,EAAKC,GAC5B,OACIlC,EAAAC,EAAAC,cAACiC,EAAD,CACAT,UAAWO,EACXG,IAAKF,EAAED,EACPR,cAAeX,EAAKf,MAAM0B,mBAKtCzB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACfY,MAAO,CAACI,SAAS,GAAIiB,WAAW,SADhC,uCApBCV,IAAMC,WC+EZU,cA9EX,SAAAA,EAAYvC,GAAO,IAAAe,EAAA,OAAAyB,OAAAC,EAAA,EAAAD,CAAAxB,KAAAuB,IACfxB,EAAAyB,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA5B,KAAMhB,KAED6C,MAAQ,CACTC,WAAY9C,EAAM+C,WAClBC,QAAShD,EAAM+C,WAAWC,SALfjC,oFAWfC,KAAKhB,MAAM+C,WAAWC,QAAUhC,KAAK6B,MAAMG,QAK3CzB,QAAQC,IAAI,gCAAiCR,KAAKhB,MAAM+C,WAAWC,SACnEC,aAAaC,QAAQ,mBAAoBC,KAAKC,UAAUpC,KAAKhB,MAAMqD,8CAG9D,IAAAC,EAAAtC,KAEL,OAAkD,IAA9CwB,OAAOe,KAAKvC,KAAKhB,MAAM+C,YAAYS,QAAgD,OAAhCxC,KAAKhB,MAAM+C,WAAWU,MAElExD,EAAAC,EAAAC,cAAA,MAAIE,UAAU,wBACoB,OAAlCW,KAAKhB,MAAM+C,WAAWC,SAC7BzB,QAAQC,IAAI,uCACZR,KAAKhB,MAAM+C,WAAWC,QAAU,GAChChC,KAAK6B,MAAMG,QAAU,GAErBzB,QAAQC,IAAIR,KAAKhB,MAAM0D,MACfzD,EAAAC,EAAAC,cAAA,MAAIE,UAAU,uBAClBJ,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOQ,MAAOI,KAAK6B,MAAMG,QAASzC,GAAG,cACjDC,SAAW,SAAAC,GACP6C,EAAKK,SAAS,CAACX,QAASvC,EAAEE,OAAOC,SAErCgD,QAAU,SAAAnD,GACN6C,EAAKtD,MAAMqD,WAAWQ,KAAKP,EAAKtD,MAAM+C,aAE1C9B,MAAO,CACH6C,MAAO,OACPC,SAAU,aAMlBxC,QAAQC,IAAI,wCACJvB,EAAAC,EAAAC,cAAA,MAAIE,UAAU,uBAClBJ,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOQ,MAAOI,KAAK6B,MAAMG,QACrCxC,SAAW,SAAAC,GACP6C,EAAKK,SAAS,CAACX,QAASvC,EAAEE,OAAOC,SAErCoD,UAAY,SAAAvD,GAEU,KAAdA,EAAEwD,QACFxD,EAAEE,OAAOuD,OAEY,IAAdzD,EAAEwD,SACTxD,EAAE0D,kBAGVtD,OAAQ,SAAAJ,GAEmB,KAAnBA,EAAEE,OAAOC,MAAc0C,EAAKtD,MAAMoE,YAAYd,EAAKtD,MAAM+C,WAAWxC,IAEnE+C,EAAKtD,MAAMqE,WAAWf,EAAKtD,MAAMqD,aAE1CpC,MAAO,CACH6C,MAAqC,IAA9B9C,KAAK6B,MAAMG,QAAQQ,OAAe,OAAmC,GAA1BxC,KAAK6B,MAAMG,QAAQQ,OACrEO,SAAU,mBAvEFnC,IAAMC,WC+DnByC,EA9DE,SAACtE,GAAD,OACbC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKI,GAAG,sBACJN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,0CACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mCACXJ,EAAAC,EAAAC,cAAA,YAA8B,OAAvBH,EAAMuE,aAAwB,4BAAUvE,EAAMuE,eAEzDtE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACXJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,sBAClBiB,QAAS,WAAOkD,SAASC,eAAe,eAAeC,UADvD,QAMZzE,EAAAC,EAAAC,cAAA,OAAKI,GAAG,eAAeU,MAAO,CAACc,OAAO,MAClC9B,EAAAC,EAAAC,cAAA,MAAIE,UAAU,8BAA8BE,GAAG,eAE3CP,EAAM0D,KAAKzB,IAAI,SAAC0C,EAAKxC,GACjB,OAAOlC,EAAAC,EAAAC,cAACyE,EAAD,CACP7B,WAAY4B,EACZpE,GAAIoE,EAAIpE,GACR8B,IAAG,MAAAwC,OAAQ1C,EAAR,KAAA0C,OAAaF,EAAI3B,QAAQ,IAC5BoB,YAAapE,EAAMoE,YACnBV,KAAM1D,EAAM0D,KACZL,WAAYrD,EAAMqD,WAClBgB,WAAYrE,EAAMqE,eAKtBpE,EAAAC,EAAAC,cAACyE,EAAD,CACA7B,WAAY,CACRxC,GAAIP,EAAM8E,OACV9B,QAAS,KACTS,MAAOzD,EAAMuE,aACbQ,QAAQ,EACRC,SAAU,KACVC,UAAW,IAAIC,MAGnB7C,IAAG,cACH+B,YAAapE,EAAMoE,YACnBV,KAAM1D,EAAM0D,KACZL,WAAYrD,EAAMqD,WAClBkB,aAAcvE,EAAMuE,aACpBY,UAAWnF,EAAMmF,UACjBd,WAAYrE,EAAMqE,aAIlB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIpC,IAAI,SAAC0C,EAAKxC,GACnC,OAAOlC,EAAAC,EAAAC,cAACyE,EAAD,CACP7B,WAAY4B,EACZpE,GAAI,QAAQ4B,EACZE,IAAG,UAAAwC,OAAY1C,WC1DpBiD,EAAA,CACX,CACI7E,GAAI,EACJyC,QAAS,8BACTS,MAAO,2BACPsB,QAAQ,EACRC,SAAU,KACVC,UAAW,uBAEf,CACI1E,GAAI,EACJyC,QAAS,0EACTS,MAAO,uCACPsB,QAAQ,EACRC,SAAU,KACVC,UAAW,uBAEf,CACI1E,GAAI,EACJyC,QAAS,OACTS,MAAO,2BACPsB,QAAQ,EACRC,SAAU,KACVC,UAAW,uBAEf,CACI1E,GAAI,EACJyC,QAAS,wCACTS,MAAO,2BACPsB,QAAQ,EACRC,SAAU,KACVC,UAAW,wBCiJJI,cAxKb,SAAAA,IAAc,IAAAtE,EAAAyB,OAAAC,EAAA,EAAAD,CAAAxB,KAAAqE,GACZtE,EAAAyB,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAA6C,GAAAzC,KAAA5B,OAEA,IAAIsE,EAAOC,EAEPtC,aAAauC,iBACfF,EAAOnC,KAAKsC,MAAMxC,aAAayC,QAAQ,qBAGvCzC,aAAaC,QAAQ,mBAAoBC,KAAKC,UAAUkC,IAI1D,IADA,IAAIK,EAAY,EACPxD,EAAI,EAAGA,EAAImD,EAAK9B,OAAQrB,IAC3BmD,EAAKnD,GAAG5B,GAAKoF,IAAWA,EAAYL,EAAKnD,GAAG5B,IAdtC,OAiBZQ,EAAK8B,MAAQ,CACXa,KAAM4B,EACNf,aAAc,KACdqB,QAAQ,EACRd,OAAQa,EAAY,EACpBE,MAAO,MAGT9E,EAAKW,cAAgBX,EAAKW,cAAcoE,KAAnBtD,OAAAuD,EAAA,EAAAvD,QAAAuD,EAAA,EAAAvD,CAAAzB,KACrBA,EAAKL,SAAWK,EAAKiF,SAASjF,EAAKL,SAASoF,KAAdtD,OAAAuD,EAAA,EAAAvD,QAAAuD,EAAA,EAAAvD,CAAAzB,KAA0B,KACxDA,EAAKoE,UAAYpE,EAAKoE,UAAUW,KAAftD,OAAAuD,EAAA,EAAAvD,QAAAuD,EAAA,EAAAvD,CAAAzB,KACjBA,EAAKqD,YAAcrD,EAAKqD,YAAY0B,KAAjBtD,OAAAuD,EAAA,EAAAvD,QAAAuD,EAAA,EAAAvD,CAAAzB,KACnBA,EAAKsD,WAAatD,EAAKsD,WAAWyB,KAAhBtD,OAAAuD,EAAA,EAAAvD,QAAAuD,EAAA,EAAAvD,CAAAzB,KA7BNA,oFAqCZQ,QAAQC,IAAI,mCACZyB,aAAaC,QAAQ,mBAAoBC,KAAKC,UAAUpC,KAAK6B,MAAMa,6CAGvDuC,GACZ1E,QAAQC,IAAI,8BAA+ByE,GAC3CjF,KAAK2C,SAAS,CACZY,aAAc0B,qCAITC,EAAMC,GACb,IAAIC,EACJ,OAAO,WAAkB,QAAAC,EAAAC,UAAA9C,OAAN+C,EAAM,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAANF,EAAME,GAAAH,UAAAG,GACvBC,aAAaN,GAEbA,EAAUO,WAAW,WAAOT,EAAIU,WAAJ,EAAQL,IAAQJ,qCAIvCU,GACPtF,QAAQC,IAAI,yBAA0BqF,GACtC7F,KAAK2C,SAAS,CACZkC,MAAOgB,uCAIAvB,GAET,IADA,IAAIK,EAAY,EACPxD,EAAI,EAAGA,EAAImD,EAAK9B,OAAQrB,IAC3BmD,EAAKnD,GAAG5B,GAAKoF,IAAWA,EAAYL,EAAKnD,GAAG5B,IAGlDS,KAAK2C,SAAS,CACZD,KAAM4B,EACNR,OAAQa,EAAY,wCAIZpF,GACVgB,QAAQC,IAAI,0BAA2BjB,GAGvC,IAAK,IAAI4B,EAAI,EAAGA,EAAInB,KAAK6B,MAAMa,KAAKF,OAAQrB,IACtCnB,KAAK6B,MAAMa,KAAKvB,GAAG5B,KAAOA,IAC5BgB,QAAQC,IAAI,6BAA6BjB,EAAG,IAAI4B,GAChDnB,KAAK6B,MAAMa,KAAKoD,OAAO3E,EAAG,IAM9BnB,KAAKmE,gDAOLnE,KAAK2C,SAAS,CACZiC,QAAS5E,KAAK6B,MAAM+C,OACpBd,OAAQ9D,KAAK6B,MAAMiC,OAAS,IAE9B7B,aAAaC,QAAQ,mBAAoBC,KAAKC,UAAUpC,KAAK6B,MAAMa,wCAG5D,IAAAJ,EAAAtC,KACH+F,EAAW/F,KAAK6B,MAAMa,KAAKsD,OAAO,SAACC,EAAK/E,GAE1C,OADK+E,EAAIC,SAAShF,EAAIuB,QAAQwD,EAAIpD,KAAK3B,EAAIuB,OACpCwD,GACN,IAAIE,OAGHC,EAAsC,OAA5BpG,KAAK6B,MAAM0B,aACTvD,KAAK6B,MAAMa,KACT1C,KAAK6B,MAAMa,KAAK2D,OAAO,SAAAnF,GACvB,OAAOA,EAAIuB,QAAUH,EAAKT,MAAM0B,eAC/B4C,KAAK,SAACjH,EAAGoH,GAAJ,OAAUpH,EAAEK,GAAK+G,EAAE/G,KAGvCgH,EAAiC,OAArBvG,KAAK6B,MAAMgD,MACT7E,KAAK6B,MAAMa,KACT1C,KAAK6B,MAAMa,KAAK2D,OAAO,SAAAnF,GACvB,OAAOA,EAAIc,QAAQwE,QAAQlE,EAAKT,MAAMgD,QAAU,IAC/CsB,KAAK,SAACjH,EAAGoH,GAAJ,OAAUpH,EAAEK,GAAK+G,EAAE/G,KAE7C,OACEN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,0CACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wCACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBAAsBE,GAAG,cACtCN,EAAAC,EAAAC,cAACsH,EAAD,CACE/G,SAAUM,KAAKN,YAGnBT,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACbY,MAAO,CACLC,OAAQ,UACRC,OAAQ,EACRC,MAAO,OACPC,SAAU,KALd,sBAUApB,EAAAC,EAAAC,cAAA,MAAIE,UAAU,wBACdJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBAAuBE,GAAG,cACvCN,EAAAC,EAAAC,cAACuH,EAAD,CACE1F,UAAW+E,EACXrF,cAAeV,KAAKU,kBAI1BzB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YAAYE,GAAG,sBAC5BN,EAAAC,EAAAC,cAACwH,EAAD,CACEjE,KAA2B,OAArB1C,KAAK6B,MAAMgD,MAAiBuB,EAAUG,EAC5ClE,WAAYrC,KAAK6B,MAAMa,KACvBa,aAAmC,OAArBvD,KAAK6B,MAAMgD,MAAiB7E,KAAK6B,MAAM0B,aAAvC,IAAAM,OAA0D7D,KAAK6B,MAAMgD,MAArE,+BACd+B,WAAY5G,KAAK4G,WACjB9C,OAAQ9D,KAAK6B,MAAMiC,OACnBK,UAAWnE,KAAKmE,UAChBf,YAAapD,KAAKoD,YAClBC,WAAYrD,KAAKqD,uBAhKbxC,aCKEgG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlI,EAAAC,EAAAC,cAACiI,EAAD,MAAS5D,SAASC,eAAe,SD2H3C,kBAAmB4D,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fd2d2ce7.chunk.js","sourcesContent":["import React from 'react';\n\nconst Search = (props) => (\n    <input type=\"text\" className=\"form-control\" placeholder=\"검색\" id=\"input-search\"\n    onChange={e => {\n        props.onSearch(e.target.value);\n    }}\n    onBlur={e => {\n        e.target.value = null;\n        props.onSearch(null);\n    }}\n    ></input>\n);\n\nexport default Search;","import React from 'react';\n\nclass GroupsEntry extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    // }\n\n    render() {\n\n        return (\n            <div style={{cursor: \"pointer\", margin: 2, color: \"#555\", fontSize: 14}}\n            className=\"col-12 m-1 p-0 font-weight-bold\"\n            onClick={(e)=>{\n                console.log(\"CLICKED GROUP: \", e.target.innerHTML);\n                this.props.onGroupChange(e.target.innerHTML);\n            }}\n            >\n            {this.props.groupname}\n            </div>\n        )\n    }\n}\n\nexport default GroupsEntry;","import React from 'react';\nimport GroupsEntry from './GroupsEntry';\n\nclass Groups extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    // }\n\n    render() {\n        return (\n        <div className=\"row p-2 no-gutters w-100 align-content-between\" style={{height:275}}>\n                <div className=\"col-12\">\n                    {this.props.grouplist.map((cur, i) => {\n                        return (\n                            <GroupsEntry\n                            groupname={cur}\n                            key={i+cur}\n                            onGroupChange={this.props.onGroupChange}\n                            />\n                        );\n                    })}\n                </div>\n                <div className=\"col-12\">\n                    <div className=\"row no-gutters ml-1\"\n                    style={{fontSize:12, fontWeight:\"bold\"}}>+ 그룹추가</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Groups;","import React from 'react';\n\n// const TodoListEntry = (props) => (\nclass TodoListEntry extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentObj: props.contentObj,\n            content: props.contentObj.content\n        }\n\n    }\n\n    componentDidUpdate() {\n        this.props.contentObj.content = this.state.content;\n        // this.state.currentObj.content = this.state.content;\n        // input박스의 onChange에 의해 state.content가 변경되고, 이 함수가 실행된다.\n        // DATA의 해당 필드를 직접 수정해 변경한다. \n        // console.log(this.state.content, this.props.contentObj.content)\n        console.log(\"TodoListEntry ) didUPDATED!!!\", this.props.contentObj.content)\n        localStorage.setItem(\"floydReminderApp\", JSON.stringify(this.props.entireDATA));\n    }\n\n    render() {\n        // if (typeof this.props.contentObj !== 'object') {\n        if (Object.keys(this.props.contentObj).length === 0 || this.props.contentObj.group === null) {\n            // console.log(\"TodoListEntry ) THIS ENTRY IS EMPTY\");\n            return <li className=\"list-group-item p-1\"></li>\n        } else if (this.props.contentObj.content === null){\n            console.log(\"TodoListEntry ) THIS ENTRY IS ADDER\");\n            this.props.contentObj.content = \"\";\n            this.state.content = \"\";\n            // this.props.entireDATA.push(this.props.contentObj);//빈어레이만드는건 인풋 클릭했을때 해야한다..\n            console.log(this.props.DATA)\n            return (<li className=\"list-group-item p-1\">\n                <input type=\"text\" value={this.state.content} id=\"newAddInput\"\n                onChange={ e => {\n                    this.setState({content: e.target.value})\n                }}\n                onFocus={ e => {\n                    this.props.entireDATA.push(this.props.contentObj);//빈어레이만드는건 인풋 클릭했을때 해야한다..\n                }}\n                style={{\n                    width: \"100%\",\n                    maxWidth: \"100%\"\n                }}\n                ></input>\n            </li>\n            )\n        } else {\n            console.log(\"TodoListEntry ) THIS ENTRY IS NORMAL\")\n            return (<li className=\"list-group-item p-1\">\n                <input type=\"text\" value={this.state.content}\n                onChange={ e => {\n                    this.setState({content: e.target.value}) // 현재 컴포넌트의 상태만 변경해서 value만 새로 렌더된다\n                }}\n                onKeyDown={ e => {\n                    // console.log(e.keyCode)\n                    if (e.keyCode === 13) {\n                        e.target.blur(); // 엔터 입력시 포커스 빼줌\n                        // if (e.target.value === \"\") this.props.removeEntry(this.props.contentObj.id);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                    }\n                }}\n                onBlur={e => {\n                    // if (e.target.value === \"\") this.props.DATA.splice(this.props.contentObj.id-1, 1);\n                    if (e.target.value === \"\") this.props.removeEntry(this.props.contentObj.id);\n                    // 값이 비어있지 않다면, DATA에 변경이 일어남을 알려야함\n                    else this.props.updateDATA(this.props.entireDATA);\n                }}\n                style={{\n                    width: this.state.content.length === 0 ? \"100%\" : this.state.content.length*15,\n                    maxWidth: \"100%\"\n                }}\n                />\n            </li>)\n        }\n    }\n}\n\nexport default TodoListEntry;","import React from 'react';\nimport TodoListEntry from './TodoListEntry';\n// import TodoListAdd from './TodoListAdd';\n\nconst TodoList = (props) => (\n    <div>\n        <div id=\"div-title-todolist\">\n            <div className=\"row no-gutters justify-content-between\">\n                <div className=\"col-9 p-1 h4 font-weight-bolder\">\n                    <span>{props.currentGroup === null ? \"모든 메모\" : props.currentGroup}</span>\n                </div>\n                <div className=\"col-2 text-right\">\n                    <button className=\"btn btn-dark btn-sm\"\n                    onClick={() => {document.getElementById('newAddInput').focus()}}\n                    >+</button>\n                </div>\n            </div>\n        </div>\n        <div id=\"div-todolist\" style={{height:300}}>\n            <ul className=\"list-group list-group-flush\" id=\"ul-todolist\">\n                {/* 기존 데이터 필드 */\n                props.DATA.map((obj, i) => {\n                    return <TodoListEntry\n                    contentObj={obj}\n                    id={obj.id}\n                    key={`!M/${i}/${obj.content[0]}`}\n                    removeEntry={props.removeEntry}\n                    DATA={props.DATA}\n                    entireDATA={props.entireDATA}\n                    updateDATA={props.updateDATA}\n                    />\n                })}\n                {/* 신규입력필드 */}\n                {/* <TodoListAdd */}\n                <TodoListEntry\n                contentObj={{\n                    id: props.nextID,\n                    content: null,\n                    group: props.currentGroup,\n                    isDone: false,\n                    remindAt: null,\n                    createdAt: new Date()\n                }}\n                // nextID={props.nextID}\n                key={`!EntryAdder`}\n                removeEntry={props.removeEntry}\n                DATA={props.DATA}\n                entireDATA={props.entireDATA}\n                currentGroup={props.currentGroup}\n                appRender={props.appRender}\n                updateDATA={props.updateDATA}\n                />\n                {/* 더미 필드 */\n                // [1,2,3,4,5,6,7,8,9].map((obj, i) => {\n                [{},{},{},{},{},{},{},{},{}].map((obj, i) => {\n                    return <TodoListEntry\n                    contentObj={obj}\n                    id={\"dummy\"+i}\n                    key={`!Dummy/${i}`}\n                    />\n                })}\n            </ul>\n        </div>\n    </div>\n);\n\nexport default TodoList;","export default [\n    {\n        id: 0,\n        content: \"할일할일123\",\n        group: \"매일할일\",\n        isDone: false,\n        remindAt: null,\n        createdAt: \"2019-03-01 13:00:00\"\n    },\n    {\n        id: 1,\n        content: \"하고 또 하고 할 일 하나둘셋\",\n        group: \"죽기전에할일\",\n        isDone: false,\n        remindAt: null,\n        createdAt: \"2019-03-01 13:00:01\"\n    },\n    {\n        id: 2,\n        content: \"todo\",\n        group: \"매일할일\",\n        isDone: false,\n        remindAt: null,\n        createdAt: \"2019-03-01 14:00:02\"\n    },\n    {\n        id: 3,\n        content: \"추가로 할 일 todo\",\n        group: \"매일할일\",\n        isDone: false,\n        remindAt: null,\n        createdAt: \"2019-03-01 14:00:02\"\n    }\n]","import React, { Component } from 'react';\nimport './App.css';\nimport Search from './components/Search'\nimport Groups from './components/Groups'\nimport TodoList from './components/TodoList'\nimport datajs from './data'\n\nclass App extends Component {\n  constructor() {\n    super();\n    \n    var data = datajs;\n    // 기존 DATA가 localStoraged에 있는지 여부에 따라 localStorage에 저장 또는 불러오기\n    if (localStorage.floydReminderApp) {\n      data = JSON.parse(localStorage.getItem(\"floydReminderApp\"));\n    } else {\n      // console.log(data);\n      localStorage.setItem(\"floydReminderApp\", JSON.stringify(data));\n    }\n\n    var largestID = 0;\n    for (var i = 0; i < data.length; i++) {\n      if (data[i].id > largestID) largestID = data[i].id;\n    }\n\n    this.state = {\n      DATA: data,\n      currentGroup: null,\n      update: false,\n      nextID: largestID + 1,\n      query: null\n    };\n\n    this.onGroupChange = this.onGroupChange.bind(this);\n    this.onSearch = this.debounce(this.onSearch.bind(this), 500);\n    this.appRender = this.appRender.bind(this);\n    this.removeEntry = this.removeEntry.bind(this);\n    this.updateDATA = this.updateDATA.bind(this);\n  }\n\n  // componentDidMount() {\n\n  // }\n\n  componentDidUpdate() {\n    console.log(\"UPDATE OCCURRED in App.js!!!!!!\")\n    localStorage.setItem(\"floydReminderApp\", JSON.stringify(this.state.DATA));\n  }\n\n  onGroupChange(g) {\n    console.log(\"onGroupChange CALLEDD!!! : \", g)\n    this.setState({\n      currentGroup: g\n    })\n  }\n\n  debounce(func, wait) {\n    var timerID;\n    return function(...args) {\n      clearTimeout(timerID);\n\n      timerID = setTimeout(() => {func(...args)}, wait);\n    }\n  }\n\n  onSearch(q) {\n    console.log(\"onSearch CALLEDD!!! : \", q)\n    this.setState({ // setState시 에러발생. 보류.\n      query: q\n    })\n  }\n\n  updateDATA(data) {\n    var largestID = 0;\n    for (var i = 0; i < data.length; i++) {\n      if (data[i].id > largestID) largestID = data[i].id;\n    }\n    \n    this.setState({\n      DATA: data,\n      nextID: largestID + 1\n    })\n  }\n\n  removeEntry(id) {\n    console.log(\"removeEntry OCCURRED!!!\", id)\n    // console.log(this.state.DATA[index])\n    // var newData = this.state.DATA.splice(index, 1);\n    for (var i = 0; i < this.state.DATA.length; i++) {\n      if (this.state.DATA[i].id === id) {\n        console.log(\"removeEntry will remove id\",id,\"i\",i)\n        this.state.DATA.splice(i, 1);\n      }\n    }\n    // this.setState({nextID: })\n    // this.state.DATA.splice(index, 1);\n    // console.log(this.state.DATA)\n    this.appRender(); // 약간 강제업데이트긴한데.. 효과가 확실하다. state를 내가 잘 못쓰는거겠지\n    // this.setState({\n    //   DATA: newData\n    // })\n  }\n\n  appRender() {\n    this.setState({\n      update: !this.state.update,\n      nextID: this.state.nextID + 1\n    })\n    localStorage.setItem(\"floydReminderApp\", JSON.stringify(this.state.DATA));\n  }\n\n  render() {\n    var groupArr = this.state.DATA.reduce((acc, cur) => {\n      if (!acc.includes(cur.group)) acc.push(cur.group);\n      return acc;\n    }, []).sort();\n\n    // 그룹 선택시 그룹명으로 필터된 어레이\n    var listArr = this.state.currentGroup === null ?\n                    this.state.DATA // 그룹 미선택시 전체어레이\n                    : this.state.DATA.filter(cur => { // 그룹 선택시 선택한 그룹에 속한 것들만 모음\n                      return cur.group === this.state.currentGroup;\n                    }).sort((a, b) => a.id - b.id); // id에 따라 정렬시킴\n\n    // 검색어 입력시 검색어 포함한 메모들만 모은 어레이\n    var searchArr = this.state.query === null ?\n                      this.state.DATA // 검색어 입력전에는 전체어레이\n                      : this.state.DATA.filter(cur => { // 검색어 입력시 검색어 포함한 것만 모음\n                        return cur.content.indexOf(this.state.query) > -1;\n                      }).sort((a, b) => a.id - b.id); // id에 따라 정렬시킴\n\n    return (\n      <div className=\"container border rounded m-2 p-0 h-100\">\n        <div className=\"row h-100 no-gutters\">\n          <div className=\"col-4 div-sidebar-light border-right\">\n            <div className=\"row mb-2 no-gutters\" id=\"div-search\">\n              <Search\n                onSearch={this.onSearch}\n              />\n            </div>\n            <div className=\"h6 p-2\"\n              style={{\n                cursor: \"pointer\",\n                margin: 2,\n                color: \"#555\",\n                fontSize: 14\n                }}\n            >\n            예정됨\n            </div>\n            <hr className=\"mt-2 mb-0 ml-2 mr-2\" />\n            <div className=\"row h-100 no-gutters\" id=\"div-groups\">\n              <Groups\n                grouplist={groupArr}\n                onGroupChange={this.onGroupChange}\n              />\n            </div>\n          </div>\n          <div className=\"col-8 p-1\" id=\"div-outer-todolist\">\n            <TodoList\n              DATA={this.state.query === null ? listArr : searchArr}//{this.state.DATA}\n              entireDATA={this.state.DATA}\n              currentGroup={this.state.query === null ? this.state.currentGroup : `\"${this.state.query}\" 검색 결과`}\n              modifyMemo={this.modifyMemo}\n              nextID={this.state.nextID}\n              appRender={this.appRender}\n              removeEntry={this.removeEntry}\n              updateDATA={this.updateDATA}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n/* 명세\n///// 필요 기능 /////\n0. App이 마운트될 때, data.js의 내용을 가져와 화면에 뿌릴 것.\n  1-1. 이후 추가되는 부분은 내부 데이터에서 조작한다.\n  1-2. Advanced) 조작할 때 마다 localStroage에 저장한다.\n    1-2-1. App의 state.data에서 조작중일텐데, state.dataLength가 변할 떄 마다 data를 stringify해서 localStroage에 저장한다.\n\n1. 메모를 작성하면 데이터 오브젝트를 생성할것\n    1-1. {\n            // memoId: \"각 메모의 아이디\",\n            content: \"입력한 메모 내용\",\n            group: \"메모를 작성한 그룹\",\n            isDone: Boolean(완료했는지 여부),\n            remindAt: \"알림설정된 날짜,시각\". 설정안된경우 초기값 null,\n            createdAt: \"생성된 날짜,시각\" // 형식 \"2019-03-01 12:00:01\" 이거면 Date.parse(\" .. \")로 해석가능\n        }\n    1-2. 작성을 시작할땐 저장안함. 변화시 실시간으로 오브젝트에 들어갈 내용을 변경할것. (onChange -> obj.content = input.value)\n      1-2-1. input에서 포커스가 떠나면 obj를 추가한다. 내용이 빈 스트링이면 push하지 않을 것.\n\n1. 작성된 메모를 App.state.DATA 어레이에 업데이트 할 것\n\n1. 작성한 메모를 삭제할 수 있을 것.\n  1-1. App.state.DATA에서 해당 메모 id를 삭제할 것\n\n1. 그룹명을 누르면 그룹에 해당하는 메모를 리스트에 띄울 것. (그룹명도 리스트 제목에 넘겨줄것)\n\n1. 그룹 추가를 누르면 그룹명을 입력받고, 비어있는 그룹이 만들어져아 한다.   << 이거 나중으로 미루자\n  1-0. 누른순간 빈 TodoList로 바뀌고, 입력하는 내용이 TodoList의 타이틀에 실시간으로 입력되며, state에 반영된다\n  1-1. 모든 필드가 null이고, 그룹명만 들어있는 {}를 만들어 저장한다.\n\n10. 매 분마다 체크해서, remindAt과 같은 시간이 되면 alert을 띄운다.\n  10-1. sweetAlert2 를 이용해보자\n\n\n\n///// Components /////\n- App\n  - Search\n  - Groups\n    - GroupsEntry\n  - TodoList\n    - DoneList\n    - TodoListEntry\n\n\n\n///// state가 필요한 Components /////\n- App\n  .DATA : data.js에서 가져온 메모 오브젝트 어레이. 추가 삭제가 이루어지는 메모 데이터임 [ {}, {}, .. ]\n  //필요없을듯>>.nextId : 새 메모가 추가될 id를 기억함\n  .currentGroup : 선택한 그룹 이름을 기억해둔다. 그룹선택이 변경되면 관련 VDOM이 업데이트 되길..\n\n- TodoList\n  // ?? .listLength : 실제 데이터보다 + 5개 만큼 더미 EntryList를 렌더해야 한다.\n                content는 비어있고, 엔트리 컴포넌트는 빈 content에 대해서는 입력받을 준비가 되어있어야 한다.\n  .\n\n// ? - TodoListEntry : 가져온(혹은 입력된) 내용을 각자의 상태로 가져야 한다. 완료했는지도 받아와 상태에 반영해야한다.\n\n- Groups\n  .groups : props.DATA에서 긁어서 그룹명들을 모은 어레이. 이걸 기반으로 GroupsEntry들을 map한다. (App.DATA에 의존해야함)\n\n\n\n\n\n*/"],"sourceRoot":""}